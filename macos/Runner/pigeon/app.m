// Autogenerated from Pigeon (v1.0.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "app.h"
#import <FlutterMacOS/FlutterMacOS.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface PBCInstalledApplication ()
+ (PBCInstalledApplication *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PBCInstalledApplication
+ (PBCInstalledApplication *)fromMap:(NSDictionary *)dict {
  PBCInstalledApplication *result = [[PBCInstalledApplication alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.icon = dict[@"icon"];
  if ((NSNull *)result.icon == [NSNull null]) {
    result.icon = nil;
  }
  result.pinyin = dict[@"pinyin"];
  if ((NSNull *)result.pinyin == [NSNull null]) {
    result.pinyin = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.path ? self.path : [NSNull null]), @"path", (self.icon ? self.icon : [NSNull null]), @"icon", (self.pinyin ? self.pinyin : [NSNull null]), @"pinyin", nil];
}
@end

@interface PBCServiceCodecReader : FlutterStandardReader
@end
@implementation PBCServiceCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PBCInstalledApplication fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface PBCServiceCodecWriter : FlutterStandardWriter
@end
@implementation PBCServiceCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PBCInstalledApplication class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface PBCServiceCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PBCServiceCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PBCServiceCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PBCServiceCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PBCServiceGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    PBCServiceCodecReaderWriter *readerWriter = [[PBCServiceCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void PBCServiceSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PBCService> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Service.getInstalledApplicationList"
        binaryMessenger:binaryMessenger
        codec:PBCServiceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getInstalledApplicationListWithCompletion:)], @"PBCService api (%@) doesn't respond to @selector(getInstalledApplicationListWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getInstalledApplicationListWithCompletion:^(NSArray<PBCInstalledApplication *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Service.hideApp"
        binaryMessenger:binaryMessenger
        codec:PBCServiceGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hideAppWithError:)], @"PBCService api (%@) doesn't respond to @selector(hideAppWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api hideAppWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
